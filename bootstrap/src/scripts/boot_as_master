#!/bin/bash

# Copyright 2013-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the
# License. A copy of the License is located at
#
# http://aws.amazon.com/asl/
#
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

set -x

# Source config
. /opt/cfncluster/cfnconfig

# Source functions
. /opt/cfncluster/scripts/functions.shlib

# Check basic DNS
check_dns_basic || error_exit "Basic DNS checks failed."

# Run preinstall script if defined
run_preinstall

## Non-scheduler specific functions
##

# Check cfn_volume is present in config
if [ "${cfn_volume}x" == "x" ]; then
  error_exit "Volume must be provided."
fi

# Check hostname resolves using DNS
myhostname=$(hostname -s)
if [ $? != 0 ]; then
  error_exit 'Failed to determine local hostname'
fi

# Enable PAT
RC=0
/opt/cfncluster/scripts/os/configure-pat.sh || RC=1
echo -e "\n# Enable PAT\n/opt/cfncluster/scripts/os/configure-pat.sh\n\n" >> /etc/rc.local || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to enable NAT(PAT)"
fi

# LVM stripe, format, mount ephemeral drives
setup_ephemeral_drives

# Attach and mount ${cfn_shared_dir} volume
RC=0
/usr/local/sbin/attachVolume.py ${cfn_volume} || RC=1
TRY=0
while [ $TRY -lt 3 ]; do
  sleep 10
  stat /dev/disk/by-ebs-volumeid/${cfn_volume} 2>&1 >/dev/null
  check_stat=$?
  if [ $check_stat -eq 0 ]; then
    break
  else
    TRY=$(( $TRY + 1 )) 
  fi
done
dev=$(stat /dev/disk/by-ebs-volumeid/${cfn_volume}|grep -- 'File:'|awk '{print $4}'|cut -d'/' -f3|tr -d "'")
fs_type=$(blkid -o list /dev/$dev | grep -- "$dev" | awk '{print $2}')
if [ "${fs_type}x" == "x" ]; then
  mkfs.xfs /dev/disk/by-ebs-volumeid/${cfn_volume} || RC=1
  fs_type="xfs"
  sleep 5
fi
echo "/dev/disk/by-ebs-volumeid/${cfn_volume} ${cfn_shared_dir} $fs_type noatime,nodiratime,_netdev 0 0" >> /etc/fstab
mkdir -p ${cfn_shared_dir} || RC=1
mount -v ${cfn_shared_dir} || RC=1
chmod 1777 ${cfn_shared_dir} || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to attach and mount volume"
fi

# Setup NFS as Master
# 1. Determine subnet for NFS exports
ETH0_MAC=`/sbin/ifconfig  | /bin/grep eth0 | awk '{print tolower($5)}' | grep '^[0-9a-f]\{2\}\(:[0-9a-f]\{2\}\)\{5\}$'`
VPC_CIDR_URI="http://169.254.169.254/latest/meta-data/network/interfaces/macs/${ETH0_MAC}/vpc-ipv4-cidr-block"
VPC_CIDR_RANGE=`curl --retry 3 --retry-delay 0 --silent --fail ${VPC_CIDR_URI}`
if [ $? -ne 0 ] ; then
   echo "Unable to retrive VPC CIDR range from meta-data. This either means a) non-VPC or b) an error" | logger -t "cfncluster"
   VPC_CIDR_RANGE="10.0.0.0/8"
else
   echo "Retrived the VPC CIDR range: ${VPC_CIDR_RANGE} from meta-data for NFS export." | logger -t "cfncluster"
fi
# 2. Update config
RC=0
cd /etc || RC=1
/bin/cp -f /opt/cfncluster/templates/os/exports.MASTER exports || RC=1
sed -i "s?<cidr>?$VPC_CIDR_RANGE?" exports || RC=1
sed -i "s?<shared_dir>?$cfn_shared_dir?" exports || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to configure NFS exports"
fi
# 3. Start NFS
RC=0
chkconfig nfs on || RC=1
chkconfig rpcbind on || RC=1
chkconfig rpcidmapd on || RC=1
service rpcbind restart || RC=1
service rpcidmapd restart || RC=1
service nfs restart || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to start NFS server"
fi

# 4. Setup NIS Master
RC=0
yum install -y ypserv || RC=1
echo "NISDOMAIN=\"internal\"" >> /etc/sysconfig/network
echo "ypserver 127.0.0.1" >> /etc/yp.conf
domainname internal
chkconfig ypserv on || RC=1
service ypserv restart || RC=1
expect -c '
spawn /usr/lib64/yp/ypinit -m
expect "<control D>"
send "\x04"
expect "Is this correct?"
send "\n"
expect eof
' || RC=1
chkconfig yppasswdd on || RC=1
chkconfig ypbind on || RC=1
chkconfig ypxfrd on || RC=1
service yppasswdd restart || RC=1
service ypbind restart || RC=1
service ypxfrd restart || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to configure NIS"
fi

# Setup Ganglia as Master
RC=0
location=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone` || RC=1
cd /etc/ganglia || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmond.conf.MASTER gmond.conf || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmetad.conf.MASTER gmetad.conf || RC=1
sed -i "s/<master>/$myhostname/" gmond.conf || RC=1
sed -i "s/<location>/$location/" gmond.conf || RC=1
sed -i "s/<stack_name>/$stack_name/" gmond.conf || RC=1
sed -i "s/<stack_name>/$stack_name/" gmetad.conf || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to configure Ganglia"
fi

# Start httpd and ganglia services
RC=0
chkconfig gmond on || RC=1:q!q
chkconfig gmetad on  || RC=1
chkconfig httpd on || RC=1
service gmond start || RC=1
service gmetad start || RC=1
service httpd start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to start Ganglia"
fi

# Setup ${cfn_cluster_user} SSH auth
RC=0
su - ${cfn_cluster_user} -c "ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N ''" || RC=1
su - ${cfn_cluster_user} -c "cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys2 && chmod 0600 ~/.ssh/authorized_keys2" || RC=1
su - ${cfn_cluster_user} -c "ssh-keyscan ${myhostname} > ~/.ssh/known_hosts && chmod 0600 ~/.ssh/known_hosts" || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to setup ${cfn_cluster_user} SSH auth"
fi

## Scheduler specific section
##

# Run boot as master for a specific scheduler
RC=0
/opt/cfncluster/scripts/${cfn_scheduler}/boot_as_master >/var/log/cfncluster.log 2>&1 || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_master for ${cfn_scheduler}"
fi

# Start sqswatcher
service supervisord restart
supervisorctl status

# Run postinstall script if defined
run_postinstall
